<start> -> <program>
<program> -> <function><program>
<program> -> @
<function> -> <type><identifier>(<parameter>){<statements>}
<parameter> -> <qualifier><type><identifier>
<parameter> -> <type><identifier>
<parameter> -> <qualifier><type><identifier>,<parameter>
<parameter> -> <type><identifier>,<parameter>
<parameter> -> @
<statements> -> <statement><statements>
<statements> -> @
<statement> -> <return_statement>
<statement> -> <for_statement>
<statement> -> <while_statement>
<statement> -> <if_statement>
<statement> -> <assignment_statement>
<statement> -> <type><identifier>;
<statement> -> <type><identifier>=<constant>;
<statement> -> break;
<statement> -> continue;
<return_statement> -> return<item>;
<item> -> <string>
<item> -> <constant>
<item> -> <identifier>
<for_statement> -> for(<for_condition>){<statements>}
<for_statement> -> for(<for_condition>)
<while_statement> -> while(<condition>){<statements>}
<while_statement> -> while(<condition>)
<if_statement> -> if(<condition>){<statements>}
<if_statement> -> if(<condition>)
<for_condition> -> <type><identifier>=<constant>;<condition>;<identifier>++
<condition> -> <item><predicate><item>
<condition> -> <boolean_expression><concatenation_condition>
<boolean_expression> -> <constant>
<predicate> -> <
<predicate> -> <=
<predicate> -> ==
<predicate> -> >=
<predicate> -> >
<predicate> -> !=
<arithmetic_expression> -> (<arithmetic_expression>)
<arithmetic_expression> -> <item><operator><arithmetic_expression>
<arithmetic_expression> -> <item>
<operator> -> +
<operator> -> -
<operator> -> *
<operator> -> /
<operator> -> %
<operator> -> &
<operator> -> |
<operator> -> ^
<assignment_statement> -> <identifier><assignment><arithmetic_expression>;
<assignment> -> =
<assignment> -> <operator>=